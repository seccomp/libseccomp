%{
/**
 * Copyright (c) 2012 Red Hat <pmoore@redhat.com>
 * Copyright (c) 2020 Red Hat <gscrivan@redhat.com>
 * Copyright (c) 2022 Microsoft Corporation. <paulmoore@microsoft.com>
 *
 * Authors: Paul Moore <paul@paul-moore.com>
 *          Giuseppe Scrivano <gscrivan@redhat.com>
 */

/*
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of version 2.1 of the GNU Lesser General Public License as
 * published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, see <http://www.gnu.org/licenses>.
 */

#include <seccomp.h>
#include <string.h>
#include "syscalls.h"

%}
struct arch_syscall_table;

%%
@@SYSCALLS_TABLE@@
%%

static int __syscall_offset_value(const struct arch_syscall_table *s,
				    int offset)
{
	return *(int *)((char *)s + offset);
}

static const struct arch_syscall_table *__syscall_lookup_name(const char *name)
{
	return in_word_set(name, strlen(name));
}

static const struct arch_syscall_table *__syscall_lookup_num(int num,
							     int offset_arch)
{
	unsigned int i;

	for (i = 0; i < sizeof(wordlist)/sizeof(wordlist[0]); i++) {
		if (__syscall_offset_value(&wordlist[i], offset_arch) == num)
			return &wordlist[i];
	}

	return NULL;
}

int syscall_resolve_name(const char *name, int offset_arch)
{
	const struct arch_syscall_table *entry;

	entry = __syscall_lookup_name(name);
	if (!entry)
		return __NR_SCMP_ERROR;

	return __syscall_offset_value(entry, offset_arch);
}

const char *syscall_resolve_num(int num, int offset_arch)
{
	const struct arch_syscall_table *entry;

	entry = __syscall_lookup_num(num, offset_arch);
	if (!entry)
		return NULL;

	return (stringpool + entry->name);
}

enum scmp_kver syscall_resolve_name_kver(const char *name, int offset_kver)
{
	const struct arch_syscall_table *entry;

	entry = __syscall_lookup_name(name);
	if (!entry)
		return __SCMP_KV_NULL;

	return __syscall_offset_value(entry, offset_kver);
}

enum scmp_kver syscall_resolve_num_kver(int num,
					int offset_arch, int offset_kver)
{
	const struct arch_syscall_table *entry;

	entry = __syscall_lookup_num(num, offset_arch);
	if (!entry)
		return __SCMP_KV_NULL;

	return __syscall_offset_value(entry, offset_kver);
}

/* DANGER: this is NOT THREAD-SAFE, use only for testing */
const struct arch_syscall_def *syscall_iterate(unsigned int spot, int offset)
{
	unsigned int iter;
	static struct arch_syscall_def arch_def;

	/* DANGER: see the note above, NOT THREAD-SAFE, use only for testing */

	arch_def.name = NULL;
	arch_def.num = __NR_SCMP_ERROR;

	for (iter = 0; iter < sizeof(wordlist)/sizeof(wordlist[0]); iter++) {
		if (wordlist[iter].index == spot) {
			arch_def.name = stringpool + wordlist[iter].name;
			arch_def.num = __syscall_offset_value(&wordlist[iter],
								offset);
			return &arch_def;
		}
	}

	return &arch_def;
}
